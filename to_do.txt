To Do





midi_parse_markov.py

[x] create dictionary for drum sounds
[ ] scale amplitude to min / max velocities in song
[x] get first duration for each track,
[ ] use first note for FoxDot future
[ ] clean up and remove key from dur_markov that has the first time message as its key
[x] get time signature
[ ] get all time signatures and use it for future scheduling (named tuple?)
[ ] some sets are empty, remove 'em' e.g. note_markov['Tenor Sax'] (empty sets are the result of the last note in the list - remove it)
[ ] add prompt for midi file input
[x] adjust get_markov_dict() so that it can accept a list or a dictionary
[ ] have some sort of txt file open with printed statements & maybe copy output to clipboard automatically https://github.com/asweigart/pyperclip
[ ] why can't I get trope_constants to work predictably?
[x] clean up empty list values in final dictionary keys, see time_series_markov
[ ] make drum converter a little more agnostic to the name of the track, e.g. 'drum', 'percussion', etc.]
[x] order the markov dictionaries so that they start with the first possible note, possibly https://docs.python.org/3/library/collections.html#collections.OrderedDict






future scripts:
[ ] for final midi generator script, add a something akin to 'a degree of similarity to the original for final output', i.e. I might not want a tune that sounds like nonsense, but is more reminiscent of the original.
